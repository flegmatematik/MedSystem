// <auto-generated />
using System;
using MedSystem.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MedSystem.Database.Migrations
{
    [DbContext(typeof(MedSystemDatabaseContext))]
    [Migration("20201215124614_Mig1")]
    partial class Mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MedSystem.Database.Models.Liek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nazov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vyrobca")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lieky");
                });

            modelBuilder.Entity("MedSystem.Database.Models.Osoba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CeleMeno")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Osoby");
                });

            modelBuilder.Entity("MedSystem.Database.Models.Pacient", b =>
                {
                    b.Property<int>("PacientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OsobaId")
                        .HasColumnType("int");

                    b.HasKey("PacientId");

                    b.HasIndex("OsobaId");

                    b.ToTable("Pacienti");
                });

            modelBuilder.Entity("MedSystem.Database.Models.PredpisanyLiek", b =>
                {
                    b.Property<int>("LiekId")
                        .HasColumnType("int");

                    b.Property<int>("VysetrenieId")
                        .HasColumnType("int");

                    b.Property<string>("Davkovanie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mnozstvo")
                        .HasColumnType("int");

                    b.Property<string>("Popis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LiekId", "VysetrenieId");

                    b.HasIndex("VysetrenieId");

                    b.ToTable("PredpisanyLiek");
                });

            modelBuilder.Entity("MedSystem.Database.Models.Uzivatel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Heslo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OsobaId")
                        .HasColumnType("int");

                    b.Property<int>("TypPristupu")
                        .HasColumnType("int");

                    b.Property<string>("UzivatelskeMeno")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OsobaId");

                    b.ToTable("Uzivatelia");
                });

            modelBuilder.Entity("MedSystem.Database.Models.Vysetrenie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ambulancia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ObjednanyTermin")
                        .HasColumnType("datetime2");

                    b.Property<int>("PacientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RealnyTermin")
                        .HasColumnType("datetime2");

                    b.Property<int>("ZPersonalId")
                        .HasColumnType("int");

                    b.Property<string>("Zaznam")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PacientId");

                    b.HasIndex("ZPersonalId");

                    b.ToTable("Vysetrenie");
                });

            modelBuilder.Entity("MedSystem.Database.Models.ZPersonal", b =>
                {
                    b.Property<int>("ZPersonalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ambulancia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OsobaId")
                        .HasColumnType("int");

                    b.Property<string>("Pozicia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZPersonalId");

                    b.HasIndex("OsobaId");

                    b.ToTable("Personal");
                });

            modelBuilder.Entity("MedSystem.Database.Models.Pacient", b =>
                {
                    b.HasOne("MedSystem.Database.Models.Osoba", "Osoba")
                        .WithMany()
                        .HasForeignKey("OsobaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedSystem.Database.Models.PredpisanyLiek", b =>
                {
                    b.HasOne("MedSystem.Database.Models.Liek", "Liek")
                        .WithMany()
                        .HasForeignKey("LiekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedSystem.Database.Models.Vysetrenie", "Vysetrenie")
                        .WithMany("PredpisaneLieky")
                        .HasForeignKey("VysetrenieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedSystem.Database.Models.Uzivatel", b =>
                {
                    b.HasOne("MedSystem.Database.Models.Osoba", "Osoba")
                        .WithMany()
                        .HasForeignKey("OsobaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedSystem.Database.Models.Vysetrenie", b =>
                {
                    b.HasOne("MedSystem.Database.Models.Pacient", "Pacient")
                        .WithMany("Vysetrenie")
                        .HasForeignKey("PacientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedSystem.Database.Models.ZPersonal", "ZPersonal")
                        .WithMany()
                        .HasForeignKey("ZPersonalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedSystem.Database.Models.ZPersonal", b =>
                {
                    b.HasOne("MedSystem.Database.Models.Osoba", "OsobaPersonalu")
                        .WithMany()
                        .HasForeignKey("OsobaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
